import type { Chat, Message } from "@/types/chat"

const STORAGE_KEY = "telegram-ai-chats"

// –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á–∞—Ç–æ–≤
const defaultChats: Chat[] = [
  {
    id: "ai-assistant",
    name: "AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç",
    type: "ai",
    avatar: "ü§ñ",
    unreadCount: 0,
    isOnline: true,
    messages: [
      {
        id: "1",
        content: "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        role: "assistant",
        timestamp: Date.now() - 3600000,
        status: "read",
      },
    ],
  },
  {
    id: "gpt-4",
    name: "GPT-4 Turbo",
    type: "ai",
    avatar: "üß†",
    unreadCount: 0,
    isOnline: true,
    messages: [],
  },
]

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏
export const chatApi = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã
  getChats: async (): Promise<Chat[]> => {
    const saved = localStorage.getItem(STORAGE_KEY)
    if (saved) {
      try {
        return JSON.parse(saved)
      } catch (error) {
        console.error("Error loading chats:", error)
        localStorage.setItem(STORAGE_KEY, JSON.stringify(defaultChats))
        return defaultChats
      }
    }
    localStorage.setItem(STORAGE_KEY, JSON.stringify(defaultChats))
    return defaultChats
  },

  // –ü–æ–ª—É—á–∏—Ç—å —á–∞—Ç –ø–æ ID
  getChat: async (chatId: string): Promise<Chat | undefined> => {
    const chats = await chatApi.getChats()
    return chats.find((chat) => chat.id === chatId)
  },

  // –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
  addMessage: async (chatId: string, message: Omit<Message, "id" | "timestamp">): Promise<Message> => {
    const newMessage: Message = {
      ...message,
      id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
      timestamp: Date.now(),
      status: "sent",
    }

    const chats = await chatApi.getChats()
    const updatedChats = chats.map((chat) => {
      if (chat.id === chatId) {
        const updatedMessages = [...chat.messages, newMessage]
        return {
          ...chat,
          messages: updatedMessages,
          lastMessage: newMessage,
          unreadCount: message.role === "assistant" ? chat.unreadCount + 1 : chat.unreadCount,
        }
      }
      return chat
    })

    localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedChats))
    return newMessage
  },

  // –û—Ç–º–µ—Ç–∏—Ç—å —á–∞—Ç –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π
  markAsRead: async (chatId: string): Promise<void> => {
    const chats = await chatApi.getChats()
    const updatedChats = chats.map((chat) => (chat.id === chatId ? { ...chat, unreadCount: 0 } : chat))

    localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedChats))
  },

  // –ü–æ–∏—Å–∫ —á–∞—Ç–æ–≤
  searchChats: async (query: string): Promise<Chat[]> => {
    const chats = await chatApi.getChats()
    return chats.filter((chat) => chat.name.toLowerCase().includes(query.toLowerCase()))
  },
}
